1) Первое видео является вступительным для курса, в нем изложены требования для дальнейшей работы 
с курсом: базовые знания c# и HTML. Курс подходит как для новичков, так и для профессионалов. 
 Основные темы: Dot Net Core, Asp.Net Core MVC, Entity framework Core, Identity, SQL, etc.

2) .Net Core это кроссплатформенный опенсоурс фреймворк, используемый для создания различных 
приложений. Поддерживается Майкрософтом. Приложения можно разрабатывать на Windows, Mac, Linux и 
Docker.

3) В видео рассказывается о том как установить программу для разработки приложений .Net Core. 
(скипаем!)

4) Как создать и запустить Asp.Net MVC Core проект, используя Visual Studio или .Net CLI.

5) MVC (Model - View- Controller) это паттерн архитектурного дизайна. 
Роли компонент: модель отвечает за данные, вью отвечает за UI, контроллер отвечает за 
интерпретацию действий пользователя, сообщая модели о необходимости совершить изменения.
Когда мы вводим в поисковую строку браузера URL, отправляется реквест на сервер(контроллер) по 
заданному URL. Получая реквест, контроллер собирает нужные данные из моделей, и используя вью,
выводит это через HTML в браузер (например, чтобы вывести список пользователей по запросу). 
В ответе на запрос необязательно должны участвовать все три компонента. 
Преимущества MVC: разделение задач, у каждого компонента своя задача.

6) По умолчанию все приложения в .Net Core - консольные. Как сделать консольное приложение веб-
приложением?
1. Изменить SDK в файле .csproj
2. Изменить выходной тип данных в .csroj
3. Добавить WebHostBuilder
4. Добавить маршрутизирование
5. Установить путь по умолчанию
Хост это объект, инкапсулирующий ресуры приложения.

7) Как пользоваться Team Explorer в VS, создать пустое Asp.Net Core приложение, связать локальный
репозиторий c репозиторием на GitHub, создать gitignore, совершить изменения (добавить в gitignore файлы)
и запушить в репозиторий.

8) Перед тем как контроллер получит запрос, его должны обработать такие компоненты как Http
пайплайн или Middleware. Asp.Net Core создает Http пайплайн, который обрабатывает запрос. Все
запросы приложения проходят через пайплайн. Middleware это компонент, использующийся в пайплайне.
Middleware имеет доступ ко всем запросам и ответам. В приложении используется множество Middleware,
запрос проходит через каждый из них по очереди, ответ возвращается обратным порядком. 

9) Что такое launchsettings.json. Сам файл находится в папке Properties. Содержить в себе настройки
запуска через IIS Express и профили запуска. Представлены два профиля запуска: Непосредственно сам
IIS Express и Project, который использует Kestrel. Каждый профиль содержит в себе имя, булевый параметр
автоматического запуска браузера и список environment variables (в котором есть ASPNETCORE_ENVIRONMENT,
со статусом Development). Профиль Project так же содержит в себе applicationUrl, значение которого
как раз и указывает на использование Kestrel.

10) Основные переменные среды это Development, Production, Staging. Но мы можем создать абсолютно любые в 
приложении. Например, если мы хотим найти какие-то ошибки в приложении, то ставим переменную Development.
